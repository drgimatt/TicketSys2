/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MyApp;

import Database.Credentials;
import Database.Data_Credentials;
import Database.Data_Notification;
import Database.Data_Tickets;
import Database.MySQLConnector;
import Database.NotificationInfo;
import Database.Tickets;
import com.formdev.flatlaf.FlatIntelliJLaf;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.Toolkit;
import java.beans.PropertyVetoException;
import java.io.IOException;
import java.util.ArrayList;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import raven.glasspanepopup.GlassPanePopup;

/**
 *
 * @OriginalAuthors @drgimatt, @paulreonal, @YumenoRetort
 * MainMenu - JFrame containing the Main Menu 
 * and the Primary functions of Ticket Management System.
 * 
 */
public class MainMenu extends javax.swing.JFrame {
 @SuppressWarnings("unchecked")
    /**
     * Creates new form MainMenu
     */
    public MainMenu() {
        initComponents();
        FrameCenter.centerJFrame(this);
        setResizable(false);
        updateTableDisplay();
        userManagerTable.setAutoCreateRowSorter(true);
        myTicketTable.setAutoCreateRowSorter(true);
        allTicketTable.setAutoCreateRowSorter(true);
        assignedTicketTable.setAutoCreateRowSorter(true);
        solvedTicketsTable.setAutoCreateRowSorter(true);
        GlassPanePopup.install(this);
    }

    public MainMenu(String acctype, String firstname, String lastname, String department, String empid) {
        this.acctype = acctype;
        this.firstname = firstname;
        this.lastname = lastname;
        this.department = department;
        this.empid = empid;
        initComponents();
        FrameCenter.centerJFrame(this);
        setResizable(false);
        updateTableDisplay();
        userManagerTable.setAutoCreateRowSorter(true);
        myTicketTable.setAutoCreateRowSorter(true);
        allTicketTable.setAutoCreateRowSorter(true);
        assignedTicketTable.setAutoCreateRowSorter(true);
        solvedTicketsTable.setAutoCreateRowSorter(true);
        setInterface(acctype);
        GlassPanePopup.install(this);        
    }
   
    
    Login login;
    NewUser newUser;
    UpdateUser updateUser;
    MySQLConnector connector;
    private String acctype, firstname, lastname, department, empid;
    private String credTableParam = "SELECT * FROM credentials";
    private String solvedTicksParam = "SELECT m1.* FROM masterrecord m1 LEFT JOIN masterrecord m2 ON (m1.TicketID = m2.TicketID and m1.RevisionCount < m2.RevisionCount) WHERE m2.RevisionCount IS NULL HAVING Status = 'Closed';";
    private Data_Tickets mySql = new Data_Tickets();
    private ArrayList<Tickets> alltickets, solvedtickets, assignedtickets, mytickets, tickethistory, followuptickets;
    private Data_Credentials creds = new Data_Credentials();
    private ArrayList<Credentials> user;
    DefaultTableModel model;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optionsPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        myTicketsBttn = new javax.swing.JButton();
        allTicketsBttn = new javax.swing.JButton();
        solvedTickets = new javax.swing.JButton();
        createTicket = new javax.swing.JButton();
        logoutBttn = new javax.swing.JButton();
        manageUserButton = new javax.swing.JButton();
        assignedTicketsBttn = new javax.swing.JButton();
        homeBttn = new javax.swing.JButton();
        parentPanel = new javax.swing.JPanel();
        defPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        cmd = new javax.swing.JButton();
        allTicketsPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        allTicketTable = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        resetFieldsButton = new javax.swing.JButton();
        filterBy = new javax.swing.JLabel();
        ticketType = new javax.swing.JComboBox<>();
        ticketTypeL = new javax.swing.JLabel();
        priorityL = new javax.swing.JLabel();
        priority = new javax.swing.JComboBox<>();
        dept = new javax.swing.JComboBox<>();
        deptL = new javax.swing.JLabel();
        status = new javax.swing.JComboBox<>();
        jLabel34 = new javax.swing.JLabel();
        filterTableButton = new javax.swing.JButton();
        search = new javax.swing.JLabel();
        searchBox = new javax.swing.JTextField();
        searchTableButton = new javax.swing.JButton();
        dateCreatedStart = new com.toedter.calendar.JDateChooser();
        dateUpdatedStart = new com.toedter.calendar.JDateChooser();
        dateCreated = new javax.swing.JLabel();
        dateUpdated = new javax.swing.JLabel();
        dateCreatedEnd = new com.toedter.calendar.JDateChooser();
        dateUpdatedEnd = new com.toedter.calendar.JDateChooser();
        userManagementPanel = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        userManagerTable = new javax.swing.JTable();
        createUserButton = new javax.swing.JButton();
        updateUserButton = new javax.swing.JButton();
        deleteUserButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        refreshTableButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        myTicketsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        myTicketTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        refreshTableButton1 = new javax.swing.JButton();
        solvedTicketsPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        solvedTicketsTable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        refreshTableButton5 = new javax.swing.JButton();
        createTicketPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        ticketTypeComboBox1 = new javax.swing.JComboBox<>();
        priorityComboBox1 = new javax.swing.JComboBox<>();
        assigneeComboBox1 = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        depComboBox3 = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        newTicketName = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        createTicketTxtArea = new javax.swing.JTextArea();
        cancelTicketBttn = new javax.swing.JButton();
        createTicketBttn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        resetTicketBttn1 = new javax.swing.JButton();
        indivTicketPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        ticketNumberLbl1 = new javax.swing.JLabel();
        ticketTypeComboBox = new javax.swing.JComboBox<>();
        priorityComboBox = new javax.swing.JComboBox<>();
        depComboBox = new javax.swing.JComboBox<>();
        assigneeComboBox = new javax.swing.JComboBox<>();
        ticketNumberLbl4 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        ticketNameTxtField = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        ticketTxtArea = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        updateTicketButton = new javax.swing.JButton();
        closeTicketButton = new javax.swing.JButton();
        cancelModifyButton = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        ticketHistoryTable = new javax.swing.JTable();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        ticketNotesTextArea = new javax.swing.JTextArea();
        jLabel24 = new javax.swing.JLabel();
        assignedTicketsPanel = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        assignedTicketTable = new javax.swing.JTable();
        jLabel23 = new javax.swing.JLabel();
        refreshTableButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Main Menu");
        setBackground(new java.awt.Color(68, 148, 220));
        setIconImage(Toolkit.getDefaultToolkit().getImage(MainMenu.class.getResource("/Image/Icon.jpg")));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        optionsPanel.setBackground(new java.awt.Color(13, 124, 207));
        optionsPanel.setMaximumSize(new java.awt.Dimension(179, 563));
        optionsPanel.setMinimumSize(new java.awt.Dimension(179, 563));

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/winrockLogo3.png"))); // NOI18N
        jLabel4.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel4.setAlignmentY(0.0F);
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        myTicketsBttn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/10.png"))); // NOI18N
        myTicketsBttn.setBorder(null);
        myTicketsBttn.setContentAreaFilled(false);
        myTicketsBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myTicketsBttnActionPerformed(evt);
            }
        });

        allTicketsBttn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/11.png"))); // NOI18N
        allTicketsBttn.setBorder(null);
        allTicketsBttn.setContentAreaFilled(false);
        allTicketsBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allTicketsBttnActionPerformed(evt);
            }
        });

        solvedTickets.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/13.png"))); // NOI18N
        solvedTickets.setBorder(null);
        solvedTickets.setContentAreaFilled(false);
        solvedTickets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solvedTicketsActionPerformed(evt);
            }
        });

        createTicket.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/14.png"))); // NOI18N
        createTicket.setBorder(null);
        createTicket.setContentAreaFilled(false);
        createTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTicketActionPerformed(evt);
            }
        });

        logoutBttn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/16.png"))); // NOI18N
        logoutBttn.setBorder(null);
        logoutBttn.setContentAreaFilled(false);
        logoutBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBttnActionPerformed(evt);
            }
        });

        manageUserButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/15.png"))); // NOI18N
        manageUserButton.setBorder(null);
        manageUserButton.setContentAreaFilled(false);
        manageUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageUserButtonActionPerformed(evt);
            }
        });

        assignedTicketsBttn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/12.png"))); // NOI18N
        assignedTicketsBttn.setBorder(null);
        assignedTicketsBttn.setContentAreaFilled(false);
        assignedTicketsBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignedTicketsBttnActionPerformed(evt);
            }
        });

        homeBttn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/17.png"))); // NOI18N
        homeBttn.setBorder(null);
        homeBttn.setContentAreaFilled(false);
        homeBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeBttnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsPanelLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(homeBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(myTicketsBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allTicketsBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(solvedTickets, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logoutBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manageUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(assignedTicketsBttn))
                .addGap(15, 15, 15))
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(myTicketsBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(allTicketsBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(assignedTicketsBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solvedTickets, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(manageUserButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logoutBttn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(homeBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(optionsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 180, 570));

        parentPanel.setLayout(new java.awt.CardLayout());

        defPanel.setBackground(new java.awt.Color(248, 244, 244));
        defPanel.setForeground(new java.awt.Color(0, 153, 255));
        defPanel.setPreferredSize(new java.awt.Dimension(610, 349));

        jLabel1.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 204));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("WELCOME TO");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 21)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("A Ticket Management System for Winrock International");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Are you ready to work on your tickets, <Employee Name>?");

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/menuBG3.png"))); // NOI18N
        jLabel5.setMaximumSize(new java.awt.Dimension(1008, 223));
        jLabel5.setMinimumSize(new java.awt.Dimension(1008, 223));

        jLabel6.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 106)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 102, 204));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("WinQueue");

        jSeparator1.setBackground(new java.awt.Color(0, 102, 102));
        jSeparator1.setForeground(new java.awt.Color(0, 102, 102));

        jSeparator2.setBackground(new java.awt.Color(0, 102, 102));
        jSeparator2.setForeground(new java.awt.Color(0, 102, 102));

        cmd.setBackground(new java.awt.Color(248, 244, 244));
        cmd.setForeground(new java.awt.Color(248, 244, 244));
        cmd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/notif.png"))); // NOI18N
        cmd.setBorder(null);
        cmd.setBorderPainted(false);
        cmd.setContentAreaFilled(false);
        cmd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout defPanelLayout = new javax.swing.GroupLayout(defPanel);
        defPanel.setLayout(defPanelLayout);
        defPanelLayout.setHorizontalGroup(
            defPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defPanelLayout.createSequentialGroup()
                .addContainerGap(212, Short.MAX_VALUE)
                .addGroup(defPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, defPanelLayout.createSequentialGroup()
                        .addGroup(defPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(defPanelLayout.createSequentialGroup()
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(213, 213, 213))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, defPanelLayout.createSequentialGroup()
                        .addComponent(cmd)
                        .addGap(77, 77, 77))))
            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        defPanelLayout.setVerticalGroup(
            defPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(cmd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(defPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGap(44, 44, 44)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        parentPanel.add(defPanel, "card2");

        allTicketsPanel.setPreferredSize(new java.awt.Dimension(610, 349));

        allTicketTable.setAutoCreateRowSorter(true);
        allTicketTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Ticket Number", "Ticket Type", "Priority", "Department", "Date Created", "Date Updated", "Assignee", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        allTicketTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                allTicketTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(allTicketTable);

        jLabel10.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 102, 204));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("All Tickets");

        resetFieldsButton.setBackground(new java.awt.Color(255, 102, 102));
        resetFieldsButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        resetFieldsButton.setForeground(new java.awt.Color(255, 255, 255));
        resetFieldsButton.setText("RESET");
        resetFieldsButton.setBorder(new javax.swing.border.MatteBorder(null));
        resetFieldsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetFieldsButtonActionPerformed(evt);
            }
        });

        filterBy.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        filterBy.setText("Filter by:");

        ticketType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Support", "Request" }));
        ticketType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ticketTypeActionPerformed(evt);
            }
        });

        ticketTypeL.setText("Ticket Type");

        priorityL.setText("Priority");

        priority.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Low", "Moderate", "High" }));

        dept.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Technical", "Financial", "Operations", "Legal", "Engineering", "Logistics", "Marketing", "Administration" }));

        deptL.setText("Department");

        status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Open", "Closed" }));

        jLabel34.setText("Status");

        filterTableButton.setBackground(new java.awt.Color(0, 153, 255));
        filterTableButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        filterTableButton.setForeground(new java.awt.Color(255, 255, 255));
        filterTableButton.setText("FILTER");
        filterTableButton.setBorder(new javax.swing.border.MatteBorder(null));
        filterTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterTableButtonActionPerformed(evt);
            }
        });

        search.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        search.setText("Search:");

        searchBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBoxActionPerformed(evt);
            }
        });

        searchTableButton.setBackground(new java.awt.Color(0, 153, 255));
        searchTableButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        searchTableButton.setForeground(new java.awt.Color(255, 255, 255));
        searchTableButton.setText("SEARCH");
        searchTableButton.setBorder(new javax.swing.border.MatteBorder(null));
        searchTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTableButtonActionPerformed(evt);
            }
        });

        dateCreated.setText("Date Created");

        dateUpdated.setText("Date Updated");

        javax.swing.GroupLayout allTicketsPanelLayout = new javax.swing.GroupLayout(allTicketsPanel);
        allTicketsPanel.setLayout(allTicketsPanelLayout);
        allTicketsPanelLayout.setHorizontalGroup(
            allTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(allTicketsPanelLayout.createSequentialGroup()
                .addGap(423, 423, 423)
                .addComponent(jLabel10)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(allTicketsPanelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(allTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(allTicketsPanelLayout.createSequentialGroup()
                        .addComponent(filterBy)
                        .addGap(18, 18, 18)
                        .addGroup(allTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ticketTypeL)
                            .addComponent(priorityL))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(allTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(priority, 0, 98, Short.MAX_VALUE)
                            .addComponent(ticketType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(allTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deptL)
                            .addComponent(jLabel34))
                        .addGap(18, 18, 18)
                        .addGroup(allTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dept, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(status, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(allTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(allTicketsPanelLayout.createSequentialGroup()
                                .addComponent(dateCreated)
                                .addGap(18, 18, 18)
                                .addComponent(dateCreatedStart, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(allTicketsPanelLayout.createSequentialGroup()
                                .addComponent(dateUpdated)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(dateUpdatedStart, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(allTicketsPanelLayout.createSequentialGroup()
                        .addComponent(search)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchBox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(allTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateCreatedEnd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                    .addComponent(dateUpdatedEnd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(allTicketsPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(searchTableButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(allTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resetFieldsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterTableButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
        );
        allTicketsPanelLayout.setVerticalGroup(
            allTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, allTicketsPanelLayout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(allTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(allTicketsPanelLayout.createSequentialGroup()
                        .addGroup(allTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, allTicketsPanelLayout.createSequentialGroup()
                                .addGroup(allTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(allTicketsPanelLayout.createSequentialGroup()
                                        .addGroup(allTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(ticketType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(deptL)
                                            .addComponent(dept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(ticketTypeL)
                                            .addComponent(dateCreated))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(allTicketsPanelLayout.createSequentialGroup()
                                        .addGroup(allTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(dateCreatedStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(dateCreatedEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(6, 6, 6)))
                                .addGroup(allTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateUpdatedStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(allTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(priority, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(priorityL)
                                        .addComponent(jLabel34)
                                        .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(dateUpdated))
                                    .addComponent(dateUpdatedEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, allTicketsPanelLayout.createSequentialGroup()
                                .addComponent(filterBy)
                                .addGap(26, 26, 26)))
                        .addGroup(allTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(search)
                            .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(resetFieldsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(filterTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        parentPanel.add(allTicketsPanel, "card4");

        userManagerTable.setAutoCreateRowSorter(true);
        userManagerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "First Name", "Middle Name", "Last Name", "Mobile #", "Email", "Birthday", "Account Type", "Department", "Position", "Start Date", "Gender"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        userManagerTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane7.setViewportView(userManagerTable);
        if (userManagerTable.getColumnModel().getColumnCount() > 0) {
            userManagerTable.getColumnModel().getColumn(2).setPreferredWidth(100);
            userManagerTable.getColumnModel().getColumn(7).setPreferredWidth(100);
        }

        createUserButton.setBackground(new java.awt.Color(0, 153, 51));
        createUserButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        createUserButton.setForeground(new java.awt.Color(255, 255, 255));
        createUserButton.setText("CREATE");
        createUserButton.setBorder(new javax.swing.border.MatteBorder(null));
        createUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUserButtonActionPerformed(evt);
            }
        });

        updateUserButton.setBackground(new java.awt.Color(204, 153, 0));
        updateUserButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        updateUserButton.setForeground(new java.awt.Color(255, 255, 255));
        updateUserButton.setText("UPDATE");
        updateUserButton.setBorder(new javax.swing.border.MatteBorder(null));
        updateUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateUserButtonActionPerformed(evt);
            }
        });

        deleteUserButton.setBackground(new java.awt.Color(153, 0, 0));
        deleteUserButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        deleteUserButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteUserButton.setText("DELETE");
        deleteUserButton.setBorder(new javax.swing.border.MatteBorder(null));
        deleteUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserButtonActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 102, 204));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("User Manager");

        refreshTableButton.setBackground(new java.awt.Color(0, 153, 255));
        refreshTableButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        refreshTableButton.setForeground(new java.awt.Color(255, 255, 255));
        refreshTableButton.setText("REFRESH");
        refreshTableButton.setBorder(new javax.swing.border.MatteBorder(null));
        refreshTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTableButtonActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel13.setText("To delete or update an entry, click the cell desired and press the corresponding buttons");

        javax.swing.GroupLayout userManagementPanelLayout = new javax.swing.GroupLayout(userManagementPanel);
        userManagementPanel.setLayout(userManagementPanelLayout);
        userManagementPanelLayout.setHorizontalGroup(
            userManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userManagementPanelLayout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(createUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refreshTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
            .addGroup(userManagementPanelLayout.createSequentialGroup()
                .addGap(389, 389, 389)
                .addComponent(jLabel12)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(userManagementPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 964, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        userManagementPanelLayout.setVerticalGroup(
            userManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userManagementPanelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(userManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        parentPanel.add(userManagementPanel, "card8");

        myTicketsPanel.setPreferredSize(new java.awt.Dimension(610, 349));

        myTicketTable.setAutoCreateRowSorter(true);
        myTicketTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Ticket Number", "Ticket Title", "Ticket Type", "Priority", "Department", "Date Created", "Date Updated", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        myTicketTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                myTicketTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(myTicketTable);

        jLabel9.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 102, 204));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("My Tickets");

        refreshTableButton1.setBackground(new java.awt.Color(0, 153, 255));
        refreshTableButton1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        refreshTableButton1.setForeground(new java.awt.Color(255, 255, 255));
        refreshTableButton1.setText("REFRESH");
        refreshTableButton1.setBorder(new javax.swing.border.MatteBorder(null));
        refreshTableButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTableButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout myTicketsPanelLayout = new javax.swing.GroupLayout(myTicketsPanel);
        myTicketsPanel.setLayout(myTicketsPanelLayout);
        myTicketsPanelLayout.setHorizontalGroup(
            myTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myTicketsPanelLayout.createSequentialGroup()
                .addGap(393, 393, 393)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(refreshTableButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
            .addGroup(myTicketsPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        myTicketsPanelLayout.setVerticalGroup(
            myTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, myTicketsPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(myTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshTableButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        parentPanel.add(myTicketsPanel, "card3");

        solvedTicketsPanel.setPreferredSize(new java.awt.Dimension(610, 349));

        solvedTicketsTable.setAutoCreateRowSorter(true);
        solvedTicketsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Ticket Number", "Ticket Title", "Ticket Type", "Priority", "Department", "Date Solved", "Assignee"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(solvedTicketsTable);

        jLabel8.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 102, 204));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Solved Tickets");

        refreshTableButton5.setBackground(new java.awt.Color(0, 153, 255));
        refreshTableButton5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        refreshTableButton5.setForeground(new java.awt.Color(255, 255, 255));
        refreshTableButton5.setText("REFRESH");
        refreshTableButton5.setBorder(new javax.swing.border.MatteBorder(null));
        refreshTableButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTableButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout solvedTicketsPanelLayout = new javax.swing.GroupLayout(solvedTicketsPanel);
        solvedTicketsPanel.setLayout(solvedTicketsPanelLayout);
        solvedTicketsPanelLayout.setHorizontalGroup(
            solvedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(solvedTicketsPanelLayout.createSequentialGroup()
                .addGap(376, 376, 376)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 295, Short.MAX_VALUE)
                .addComponent(refreshTableButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
            .addGroup(solvedTicketsPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        solvedTicketsPanelLayout.setVerticalGroup(
            solvedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, solvedTicketsPanelLayout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(solvedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(refreshTableButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        parentPanel.add(solvedTicketsPanel, "card5");

        createTicketPanel.setPreferredSize(new java.awt.Dimension(610, 349));

        jPanel3.setEnabled(false);

        ticketTypeComboBox1.setBackground(new java.awt.Color(0, 102, 204));
        ticketTypeComboBox1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ticketTypeComboBox1.setForeground(new java.awt.Color(255, 255, 255));
        ticketTypeComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Request", "Support" }));
        ticketTypeComboBox1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        priorityComboBox1.setBackground(new java.awt.Color(0, 102, 204));
        priorityComboBox1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        priorityComboBox1.setForeground(new java.awt.Color(255, 255, 255));
        priorityComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Low", "Moderate", "High" }));
        priorityComboBox1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        assigneeComboBox1.setBackground(new java.awt.Color(0, 102, 204));
        assigneeComboBox1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        assigneeComboBox1.setForeground(new java.awt.Color(255, 255, 255));
        assigneeComboBox1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        assigneeComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assigneeComboBox1ActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel14.setText("Ticket Type");

        jLabel15.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel15.setText("Priority Level");

        jLabel16.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel16.setText("Assigned Department");

        depComboBox3.setBackground(new java.awt.Color(0, 102, 204));
        depComboBox3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        depComboBox3.setForeground(new java.awt.Color(255, 255, 255));
        depComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Technical", "Financial", "Operations", "Legal", "Engineering", "Logistics", "Marketing", "Administration" }));
        depComboBox3.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        depComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depComboBox3ActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel17.setText("Assigned User");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ticketTypeComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(priorityComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(assigneeComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(depComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17))
                        .addGap(0, 27, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(158, 158, 158)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ticketTypeComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(priorityComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(depComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(assigneeComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        newTicketName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        newTicketName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTicketNameActionPerformed(evt);
            }
        });

        createTicketTxtArea.setColumns(20);
        createTicketTxtArea.setLineWrap(true);
        createTicketTxtArea.setRows(5);
        jScrollPane5.setViewportView(createTicketTxtArea);

        cancelTicketBttn.setBackground(new java.awt.Color(153, 0, 0));
        cancelTicketBttn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        cancelTicketBttn.setForeground(new java.awt.Color(255, 255, 255));
        cancelTicketBttn.setText("CANCEL");
        cancelTicketBttn.setBorder(new javax.swing.border.MatteBorder(null));
        cancelTicketBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelTicketBttnActionPerformed(evt);
            }
        });

        createTicketBttn.setBackground(new java.awt.Color(204, 153, 0));
        createTicketBttn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        createTicketBttn.setForeground(new java.awt.Color(255, 255, 255));
        createTicketBttn.setText("CREATE TICKET");
        createTicketBttn.setBorder(new javax.swing.border.MatteBorder(null));
        createTicketBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTicketBttnActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 102, 204));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Create Ticket");

        jLabel18.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel18.setText("Ticket Title");

        jLabel19.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel19.setText("Ticket Description");

        resetTicketBttn1.setBackground(new java.awt.Color(0, 153, 51));
        resetTicketBttn1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        resetTicketBttn1.setForeground(new java.awt.Color(255, 255, 255));
        resetTicketBttn1.setText("RESET");
        resetTicketBttn1.setBorder(new javax.swing.border.MatteBorder(null));
        resetTicketBttn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetTicketBttn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel19)
                            .addComponent(jLabel18)
                            .addComponent(jScrollPane5)
                            .addComponent(newTicketName, javax.swing.GroupLayout.PREFERRED_SIZE, 712, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(307, 307, 307)
                        .addComponent(jLabel7))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addComponent(createTicketBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelTicketBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(resetTicketBttn1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(newTicketName, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelTicketBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createTicketBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetTicketBttn1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
        );

        javax.swing.GroupLayout createTicketPanelLayout = new javax.swing.GroupLayout(createTicketPanel);
        createTicketPanel.setLayout(createTicketPanelLayout);
        createTicketPanelLayout.setHorizontalGroup(
            createTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createTicketPanelLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        createTicketPanelLayout.setVerticalGroup(
            createTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        parentPanel.add(createTicketPanel, "card6");

        indivTicketPanel.setPreferredSize(new java.awt.Dimension(610, 349));

        jPanel1.setPreferredSize(new java.awt.Dimension(191, 573));

        ticketNumberLbl1.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        ticketNumberLbl1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ticketNumberLbl1.setText("Ticket Number:");

        ticketTypeComboBox.setBackground(new java.awt.Color(0, 102, 204));
        ticketTypeComboBox.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ticketTypeComboBox.setForeground(new java.awt.Color(255, 255, 255));
        ticketTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Request", "Support" }));
        ticketTypeComboBox.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        ticketTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ticketTypeComboBoxActionPerformed(evt);
            }
        });

        priorityComboBox.setBackground(new java.awt.Color(0, 102, 204));
        priorityComboBox.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        priorityComboBox.setForeground(new java.awt.Color(255, 255, 255));
        priorityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Low", "Moderate", "High" }));
        priorityComboBox.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        depComboBox.setBackground(new java.awt.Color(0, 102, 204));
        depComboBox.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        depComboBox.setForeground(new java.awt.Color(255, 255, 255));
        depComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Technical", "Financial", "Operations", "Legal", "Engineering", "Logistics", "Marketing", "Administration" }));
        depComboBox.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        depComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depComboBoxActionPerformed(evt);
            }
        });

        assigneeComboBox.setBackground(new java.awt.Color(0, 102, 204));
        assigneeComboBox.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        assigneeComboBox.setForeground(new java.awt.Color(255, 255, 255));
        assigneeComboBox.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        assigneeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assigneeComboBoxActionPerformed(evt);
            }
        });

        ticketNumberLbl4.setFont(new java.awt.Font("Arial Narrow", 1, 36)); // NOI18N
        ticketNumberLbl4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ticketNumberLbl4.setText("2023011");

        jSeparator4.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator4.setForeground(new java.awt.Color(0, 0, 0));

        jLabel26.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel26.setText("Type");

        jLabel27.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel27.setText("Priority");

        jLabel28.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel28.setText("Department");

        jLabel29.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel29.setText("Assigned Personnel");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(ticketNumberLbl4, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(ticketNumberLbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(32, 32, 32))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(assigneeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ticketTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(priorityComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(depComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel28)
                                    .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(11, 11, 11)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(ticketNumberLbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ticketNumberLbl4, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ticketTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(priorityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jLabel28)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(depComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(assigneeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ticketNameTxtField.setEditable(false);
        ticketNameTxtField.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        ticketTxtArea.setEditable(false);
        ticketTxtArea.setColumns(20);
        ticketTxtArea.setLineWrap(true);
        ticketTxtArea.setRows(5);
        jScrollPane4.setViewportView(ticketTxtArea);

        jLabel11.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 102, 204));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Modify Ticket");

        updateTicketButton.setBackground(new java.awt.Color(204, 153, 0));
        updateTicketButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        updateTicketButton.setForeground(new java.awt.Color(255, 255, 255));
        updateTicketButton.setText("UPDATE TICKET");
        updateTicketButton.setBorder(new javax.swing.border.MatteBorder(null));
        updateTicketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateTicketButtonActionPerformed(evt);
            }
        });

        closeTicketButton.setBackground(new java.awt.Color(0, 153, 51));
        closeTicketButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        closeTicketButton.setForeground(new java.awt.Color(255, 255, 255));
        closeTicketButton.setText("CLOSE TICKET");
        closeTicketButton.setBorder(new javax.swing.border.MatteBorder(null));
        closeTicketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeTicketButtonActionPerformed(evt);
            }
        });

        cancelModifyButton.setBackground(new java.awt.Color(153, 0, 0));
        cancelModifyButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        cancelModifyButton.setForeground(new java.awt.Color(255, 255, 255));
        cancelModifyButton.setText("CANCEL");
        cancelModifyButton.setBorder(new javax.swing.border.MatteBorder(null));
        cancelModifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelModifyButtonActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel20.setText("Ticket Name");

        jLabel21.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel21.setText("Ticket Description");

        ticketHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Revision #", "Date Updated", "Status", "Department", "Personnel", "Priority"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ticketHistoryTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        ticketHistoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ticketHistoryTableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(ticketHistoryTable);

        jLabel22.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel22.setText("Ticket History");

        ticketNotesTextArea.setColumns(20);
        ticketNotesTextArea.setLineWrap(true);
        ticketNotesTextArea.setRows(5);
        jScrollPane9.setViewportView(ticketNotesTextArea);

        jLabel24.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel24.setText("Ticket Notes");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(198, 198, 198)
                .addComponent(updateTicketButton, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(closeTicketButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cancelModifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 694, Short.MAX_VALUE)
                            .addComponent(ticketNameTxtField)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane9)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addContainerGap(83, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(327, Short.MAX_VALUE)
                    .addComponent(jLabel11)
                    .addContainerGap(327, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(53, Short.MAX_VALUE)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ticketNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane9)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(updateTicketButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(closeTicketButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cancelModifyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(17, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(501, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout indivTicketPanelLayout = new javax.swing.GroupLayout(indivTicketPanel);
        indivTicketPanel.setLayout(indivTicketPanelLayout);
        indivTicketPanelLayout.setHorizontalGroup(
            indivTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indivTicketPanelLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        indivTicketPanelLayout.setVerticalGroup(
            indivTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        parentPanel.add(indivTicketPanel, "card7");

        assignedTicketsPanel.setPreferredSize(new java.awt.Dimension(610, 349));

        assignedTicketTable.setAutoCreateRowSorter(true);
        assignedTicketTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Ticket Number", "Ticket Title", "Ticket Type", "Priority", "Department", "Date Created", "Date Updated"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        assignedTicketTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                assignedTicketTableMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(assignedTicketTable);

        jLabel23.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(0, 102, 204));
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("Assigned Tickets");

        refreshTableButton4.setBackground(new java.awt.Color(0, 153, 255));
        refreshTableButton4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        refreshTableButton4.setForeground(new java.awt.Color(255, 255, 255));
        refreshTableButton4.setText("REFRESH");
        refreshTableButton4.setBorder(new javax.swing.border.MatteBorder(null));
        refreshTableButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTableButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout assignedTicketsPanelLayout = new javax.swing.GroupLayout(assignedTicketsPanel);
        assignedTicketsPanel.setLayout(assignedTicketsPanelLayout);
        assignedTicketsPanelLayout.setHorizontalGroup(
            assignedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assignedTicketsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(assignedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(assignedTicketsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel23)
                        .addGap(282, 282, 282)
                        .addComponent(refreshTableButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(assignedTicketsPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 957, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 1, Short.MAX_VALUE)))
                .addContainerGap())
        );
        assignedTicketsPanelLayout.setVerticalGroup(
            assignedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, assignedTicketsPanelLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(assignedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(refreshTableButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        parentPanel.add(assignedTicketsPanel, "card4");

        getContentPane().add(parentPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(179, 0, 970, 570));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
  
    private void cancelTicketBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelTicketBttnActionPerformed
        // TODO add your handling code here:
        parentPanel.removeAll();
        parentPanel.add(defPanel);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_cancelTicketBttnActionPerformed

    private void createUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUserButtonActionPerformed
        // TODO add your handling code here:
        try {
                newUser = newUser.getInstance(getAcctype(),getDepartment());
            } catch (IOException ex) {
                Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
            newUser.setVisible(true); 

    }//GEN-LAST:event_createUserButtonActionPerformed

    private void deleteUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserButtonActionPerformed
        // TODO add your handling code here:
        if (userManagerTable.getSelectedRowCount()==1){
            int ans = JOptionPane.showOptionDialog(this,"Are you sure you want to delete this entry?", "Delete User", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] {"Yes", "No"}, JOptionPane.YES_OPTION);
            if (ans == JOptionPane.YES_OPTION){
            if(userManagerTable.getValueAt(userManagerTable.getSelectedRow(), 0).toString().equals(getEmpid())){    
                JOptionPane.showMessageDialog(null, "Credential deletion aborted. You tried to delete your own record", "Error", JOptionPane.ERROR_MESSAGE);
            }
            else if (userManagerTable.getValueAt(userManagerTable.getSelectedRow(), 7).toString().equals(getAcctype())){
                JOptionPane.showMessageDialog(null, "Credential deletion aborted. You tried to delete an " + getAcctype() +".", "Error", JOptionPane.ERROR_MESSAGE);
            }           
            else{ 
            creds.deleteRow("credentials",userManagerTable.getValueAt(userManagerTable.getSelectedRow(), 0).toString());
            updateTableDisplay();}
            }
        } else {
            if (userManagerTable.getRowCount()==0){
                JOptionPane.showMessageDialog(this, "Table is empty.");
            } else {
                JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            }
        }
    }//GEN-LAST:event_deleteUserButtonActionPerformed

    private void updateUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateUserButtonActionPerformed
        // TODO add your handling code here:
        model = (DefaultTableModel) userManagerTable.getModel();
        int selectedRow = userManagerTable.getSelectedRow();
        if (userManagerTable.getSelectedRowCount()==1){
            try {
                updateUser = UpdateUser.getInstance(getAcctype(),getDepartment(),getEmpid());
            } catch (IOException ex) {
                Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
            updateUser.setVisible(true);        
        try {
            updateUser.populateflds((userManagerTable.getValueAt(selectedRow, 0).toString()));
        } catch (ParseException ex) {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        } else {
            if (userManagerTable.getRowCount()==0){
                JOptionPane.showMessageDialog(this, "Table is empty.");
            } else {
                JOptionPane.showMessageDialog(this, "Please select a row to update.");
            }
        }        
        
        
        
    }//GEN-LAST:event_updateUserButtonActionPerformed

    private void refreshTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTableButtonActionPerformed
        // TODO add your handling code here:
        updateTableDisplay();
    }//GEN-LAST:event_refreshTableButtonActionPerformed

    private void ticketTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ticketTypeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ticketTypeComboBoxActionPerformed

    private void createTicketBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTicketBttnActionPerformed
        // TODO add your handling code here:
        Data_Tickets ticket = new Data_Tickets();
        SimpleDateFormat sdl = new SimpleDateFormat("yyyyMM");
        long now = System.currentTimeMillis();
        Timestamp tstamp = new Timestamp(now);
        Date currentdate = new Date();
        String parameters = "SELECT DISTINCT CONCAT(firstname, ' ', lastname) AS combined FROM credentials WHERE department = '" + depComboBox3.getSelectedItem().toString() + "'";
        String RevCount = "0";
        String Creator = getFirstname() + " " + getLastname();
        String DateCreated = tstamp.toString();
        String AssignedPersonnel = "";
        if(acctype.equals("Administrator") || acctype.equals("Superadmin")){
        AssignedPersonnel = assigneeComboBox1.getSelectedItem().toString();
        }
        else{
        AssignedPersonnel = "N/A";
        }
        ArrayList<String> ticketInfo = new ArrayList<String>();
        ticketInfo.add(sdl.format(currentdate) + ticket.tallyCount("alltickets")); //TicketID
        ticketInfo.add(newTicketName.getText()); //TicketName
        ticketInfo.add(createTicketTxtArea.getText()); //TicketDescription
        ticketInfo.add(ticketTypeComboBox1.getSelectedItem().toString()); //TicketType
        ticketInfo.add(priorityComboBox1.getSelectedItem().toString()); //Priority
        ticketInfo.add(depComboBox3.getSelectedItem().toString()); //TicketDepartment
        ticketInfo.add(DateCreated); //DateCreated
        ticketInfo.add(Creator); //Creator
        ticketInfo.add(""); //TicketNotes
        ticketInfo.add(AssignedPersonnel); //AssignedPPersonel
        ticketInfo.add(RevCount); //RevisionCount
        ticketInfo.add("0"); //Followup
        ticketInfo.add("Open"); //Status
        manipulateTicket(ticketInfo,"Create");        
        parentPanel.removeAll();
        parentPanel.add(defPanel);
        parentPanel.repaint();
        parentPanel.revalidate();
        resetCreateFields();         
    }//GEN-LAST:event_createTicketBttnActionPerformed

    private void newTicketNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTicketNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newTicketNameActionPerformed

    private void cancelModifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelModifyButtonActionPerformed
        // TODO add your handling code here:
        parentPanel.removeAll();
        parentPanel.add(defPanel);
        parentPanel.repaint();
        parentPanel.revalidate();
        updateTableDisplay();        
    }//GEN-LAST:event_cancelModifyButtonActionPerformed

    private void assigneeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assigneeComboBoxActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_assigneeComboBoxActionPerformed

    private void updateTicketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateTicketButtonActionPerformed
        // TODO add your handling code here:
        String RevCount = "";
        String Creator = "";
        String DateCreated = "";
        Data_Tickets ticket = new Data_Tickets();
        ArrayList<Tickets> oldInfo;
        String parameters = "SELECT m1.* FROM masterrecord m1 LEFT JOIN masterrecord m2 ON (m1.TicketID = m2.TicketID and m1.RevisionCount < m2.RevisionCount) WHERE m2.RevisionCount IS NULL HAVING TicketID = '" + ticketNumberLbl4.getText() + "'";
        oldInfo = ticket.ShowRec(parameters);
        for (Tickets t: oldInfo){
        RevCount = Integer.toString(t.getRevcount()+1);
        DateCreated = t.getDateCreated();
        Creator = t.getCreator();
        } 
        ArrayList<String> ticketInfo = new ArrayList<String>();
        ticketInfo.add(ticketNumberLbl4.getText()); //TicketID
        ticketInfo.add(ticketNameTxtField.getText()); //TicketName
        ticketInfo.add(ticketTxtArea.getText()); //TicketDescription
        ticketInfo.add(ticketTypeComboBox.getSelectedItem().toString()); //TicketType
        ticketInfo.add(priorityComboBox.getSelectedItem().toString()); //Priority
        ticketInfo.add(depComboBox.getSelectedItem().toString()); //TicketDepartment
        ticketInfo.add(DateCreated); //DateCreated
        ticketInfo.add(Creator); //Creator
        ticketInfo.add(ticketNotesTextArea.getText()); //TicketNotes
        ticketInfo.add(assigneeComboBox.getSelectedItem().toString()); //AssignedPPersonel
        ticketInfo.add(RevCount); //RevisionCount
        ticketInfo.add("0"); //Followup
        ticketInfo.add("Open"); //Status
        manipulateTicket(ticketInfo,"Update");        
        parentPanel.removeAll();
        parentPanel.add(defPanel);
        parentPanel.repaint();
        parentPanel.revalidate();  
    }//GEN-LAST:event_updateTicketButtonActionPerformed

    private void depComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depComboBoxActionPerformed
        // TODO add your handling code here:
        // Insert provision on which if current user is an administrator, allow assigning of employee if the department selected is where the admin belongs to
        String department = depComboBox.getSelectedItem().toString();
        Data_Tickets emp = new Data_Tickets();
        String param = "SELECT DISTINCT CONCAT(firstname, ' ', lastname) AS combined FROM credentials WHERE department = '" + department + "'";
        Object[] emplist = emp.employeeList(param).toArray();
        assigneeComboBox.setModel(new DefaultComboBoxModel(emplist));  
        assigneeComboBox.addItem("N/A");
        
    }//GEN-LAST:event_depComboBoxActionPerformed

    private void depComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depComboBox3ActionPerformed
        // TODO add your handling code here:
        String department = depComboBox3.getSelectedItem().toString();
        Data_Tickets emp = new Data_Tickets();
        String param = "SELECT DISTINCT CONCAT(firstname, ' ', lastname) AS combined FROM credentials WHERE department = '" + department + "'";
        Object[] emplist = emp.employeeList(param).toArray();
        assigneeComboBox1.setModel(new DefaultComboBoxModel(emplist));
        assigneeComboBox1.addItem("N/A");
        if((getAcctype().equals("Administrator") && getDepartment().equals(depComboBox3.getSelectedItem())) || getAcctype().equals("Superadmin")){
            assigneeComboBox1.setVisible(true);
            jLabel17.setVisible(true);
        }
        else {
            assigneeComboBox1.setVisible(false);
            jLabel17.setVisible(false);
        }
        
    }//GEN-LAST:event_depComboBox3ActionPerformed

    private void assigneeComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assigneeComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_assigneeComboBox1ActionPerformed

    private void closeTicketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeTicketButtonActionPerformed
        // TODO add your handling code here:
            int ans = JOptionPane.showOptionDialog(this,"Are you sure you want to close this ticket?", "Close Ticket", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] {"Yes", "No"}, JOptionPane.YES_OPTION);
            if (ans == JOptionPane.YES_OPTION){
                String RevCount = "";
                String Creator = "";
                String DateCreated = "";
                Data_Tickets ticket = new Data_Tickets();
                ArrayList<Tickets> oldInfo;
                String parameters = "SELECT m1.* FROM masterrecord m1 LEFT JOIN masterrecord m2 ON (m1.TicketID = m2.TicketID and m1.RevisionCount < m2.RevisionCount) WHERE m2.RevisionCount IS NULL HAVING TicketID = '" + ticketNumberLbl4.getText() + "'";
                oldInfo = ticket.ShowRec(parameters);
                for (Tickets t: oldInfo){
                RevCount = Integer.toString(t.getRevcount()+1);
                DateCreated = t.getDateCreated();
                Creator = t.getCreator();
                } 
                ArrayList<String> ticketInfo = new ArrayList<String>();
                ticketInfo.add(ticketNumberLbl4.getText()); //TicketID
                ticketInfo.add(ticketNameTxtField.getText()); //TicketName
                ticketInfo.add(ticketTxtArea.getText()); //TicketDescription
                ticketInfo.add(ticketTypeComboBox.getSelectedItem().toString()); //TicketType
                ticketInfo.add(priorityComboBox.getSelectedItem().toString()); //Priority
                ticketInfo.add(depComboBox.getSelectedItem().toString()); //TicketDepartment
                ticketInfo.add(DateCreated); //DateCreated
                ticketInfo.add(Creator); //Creator
                ticketInfo.add(ticketNotesTextArea.getText()); //TicketNotes
                ticketInfo.add(assigneeComboBox.getSelectedItem().toString()); //AssignedPPersonel
                ticketInfo.add(RevCount); //RevisionCount
                ticketInfo.add("0"); //Followup
                ticketInfo.add("Closed"); //Status
                manipulateTicket(ticketInfo,"Close");
                parentPanel.removeAll();
                parentPanel.add(defPanel);
                parentPanel.repaint();
                parentPanel.revalidate();               
                } 
            
    }//GEN-LAST:event_closeTicketButtonActionPerformed

    private void ticketHistoryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ticketHistoryTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel DFT = (DefaultTableModel) ticketHistoryTable.getModel();
        int selectedRow =  ticketHistoryTable.getSelectedRow();
        int row = ticketHistoryTable.rowAtPoint(evt.getPoint());
        int col = ticketHistoryTable.columnAtPoint(evt.getPoint());
        if (row >= 0 && col >= 0) {
            String id = ticketNumberLbl4.getText();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            ArrayList<Tickets> ticketinfo;
            Data_Tickets ticket = new Data_Tickets();
            String parameters = "SELECT * FROM masterrecord WHERE TicketID = '" + id + "' ORDER BY Number ASC";
            ticketinfo = ticket.ShowRec(parameters);
            ticketTypeComboBox.setSelectedItem(ticketHistoryTable.getValueAt(selectedRow,1).toString());
            priorityComboBox.setSelectedItem(ticketHistoryTable.getValueAt(selectedRow,5).toString());
            depComboBox.setSelectedItem(ticketHistoryTable.getValueAt(selectedRow,3).toString());
            for(Tickets t: ticketinfo){
            ticketNameTxtField.setText(t.getTitle());
            ticketTxtArea.setText(t.getDesc());
            String department = depComboBox.getSelectedItem().toString();
            Data_Tickets emp = new Data_Tickets();
            String param = "SELECT DISTINCT CONCAT(firstname, ' ', lastname) AS combined FROM credentials WHERE department = '" + department + "'";
            Object[] emplist = emp.employeeList(param).toArray();
            assigneeComboBox.setModel(new DefaultComboBoxModel(emplist));
            assigneeComboBox.setSelectedItem(t.getPersonnel());
            }   
        } 
    }//GEN-LAST:event_ticketHistoryTableMouseClicked

    private void assignedTicketTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_assignedTicketTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel DFT = (DefaultTableModel) assignedTicketTable.getModel();
        int selectedRow =  assignedTicketTable.getSelectedRow();
        int row = assignedTicketTable.rowAtPoint(evt.getPoint());
        int col = assignedTicketTable.columnAtPoint(evt.getPoint());
        if (row >= 0 && col >= 0) {
            utilizeModifyTicket(assignedTicketTable, "Assigned");
        }        
    }//GEN-LAST:event_assignedTicketTableMouseClicked

    private void resetTicketBttn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetTicketBttn1ActionPerformed
        // TODO add your handling code here:
        resetCreateFields();
    }//GEN-LAST:event_resetTicketBttn1ActionPerformed

    private void myTicketTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myTicketTableMouseClicked
        // TODO add your handling code here:
        if (myTicketTable.getSelectedRowCount()==1){
            long now = System.currentTimeMillis();
            Timestamp tstamp = new Timestamp(now);
            NotificationInfo notif = null;
            Data_Notification notify = new Data_Notification();
            int ans = JOptionPane.showOptionDialog(this,"Followup this ticket?", "Followup Ticket", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] {"Yes", "No"}, JOptionPane.YES_OPTION);
            if (ans == JOptionPane.YES_OPTION){
            if (myTicketTable.getValueAt(myTicketTable.getSelectedRow(), 7).toString().equals("Closed")){
            JOptionPane.showMessageDialog(null, "This ticket has already been marked as closed.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            else{
            //mySql.editRowFollowup("alltickets", "1" ,myTicketTable.getValueAt(myTicketTable.getSelectedRow(), 0).toString());
            mytickets = mySql.ShowRec("SELECT * FROM alltickets where TicketID = '" + myTicketTable.getValueAt(myTicketTable.getSelectedRow(), 0).toString() + "'");
            for(Tickets t: mytickets){
            notif = new NotificationInfo(t.getPersonnel(), getFirstname() + " " + getLastname(), "followup", 0, tstamp.toString(), myTicketTable.getValueAt(myTicketTable.getSelectedRow(), 0).toString());
            }
            notify.addRow("notification", notif);  
            updateTableDisplay();
            }
            }
        } else {
            if (myTicketTable.getRowCount()==0){
                JOptionPane.showMessageDialog(this, "Table is empty.");
            } else {
                JOptionPane.showMessageDialog(this, "Please select a row to followup.");
            }
        }        
    }//GEN-LAST:event_myTicketTableMouseClicked

    private void refreshTableButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTableButton1ActionPerformed
        // TODO add your handling code here:
        updateTableDisplay();
    }//GEN-LAST:event_refreshTableButton1ActionPerformed

    private void refreshTableButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTableButton4ActionPerformed
        // TODO add your handling code here:
        updateTableDisplay();
    }//GEN-LAST:event_refreshTableButton4ActionPerformed

    private void refreshTableButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTableButton5ActionPerformed
        // TODO add your handling code here:
        updateTableDisplay();
    }//GEN-LAST:event_refreshTableButton5ActionPerformed

    private void cmdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdActionPerformed
        // TODO add your handling code here:
        String name = getFirstname() + " " + getLastname();
        Notification test = new Notification(name);
        Data_Notification notify = new Data_Notification();
        ArrayList<NotificationInfo> notif;
        notif = notify.ShowRec("SELECT * FROM notification WHERE user_to_notify = '" + name + "' AND seen_by_user != '" + 2 + "' ORDER BY date DESC");
        for (NotificationInfo n : notif){
            if(n.getSeenNotif() == 0){
                switch (n.getEventType()) {
                    case "assign":
                        test.loadNotif(n.getEventUser() + " assigned you to a new ticket. Check the Assigned Tickets table for Ticket ID: " + n.getTicketid() +".", n.getDate());
                        break;
                    case "close":
                        test.loadNotif("Your created ticket, " + n.getTicketid() + " has been closed. Check the My Tickets table.", n.getDate());
                        break;
                    case "followup":
                        test.loadNotif(n.getEventUser() + "requested a followup on Ticket Number: " + n.getTicketid() + ". Check the Assigned Tickets table and finish working on the ticket.", n.getDate());
                        break;
                    default:
                        break;
                }
            }
            else if(n.getSeenNotif() == 1){
                switch (n.getEventType()) {
                    case "assign":
                        test.loadNotifLighten(n.getEventUser() + " assigned you to a new ticket. Check the Assigned Tickets table for Ticket ID: " + n.getTicketid() +".", n.getDate());
                        break;
                    case "close":
                        test.loadNotifLighten("Your created ticket, " + n.getTicketid() + " has been closed. Check the My Tickets table.", n.getDate());
                        break;
                    case "followup":
                        test.loadNotifLighten(n.getEventUser() + "requested a followup on Ticket Number: " + n.getTicketid() + ". Check the Assigned Tickets table and finish working on the ticket.", n.getDate());
                        break;
                    default:
                        break;
                }
            }
        }
        GlassPanePopup.showPopup(test);
        for (NotificationInfo n : notif){
            notify.editRow("UPDATE notification SET seen_by_user = '1' WHERE id = '" + n.getId() + "'", n);
            }
    }//GEN-LAST:event_cmdActionPerformed

    private void homeBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeBttnActionPerformed
        // TODO add your handling code here:
        //MainMenu home = new MainMenu();
        parentPanel.removeAll();
        parentPanel.add(defPanel);
        parentPanel.repaint();
        parentPanel.revalidate();

        //dispose();
    }//GEN-LAST:event_homeBttnActionPerformed

    private void assignedTicketsBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignedTicketsBttnActionPerformed
        // TODO add your handling code here:
        parentPanel.removeAll();
        parentPanel.add(assignedTicketsPanel);
        parentPanel.repaint();
        parentPanel.revalidate();
        updateTableDisplay();
    }//GEN-LAST:event_assignedTicketsBttnActionPerformed

    private void manageUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageUserButtonActionPerformed
        // TODO add your handling code here:
        parentPanel.removeAll();
        parentPanel.add(userManagementPanel);
        parentPanel.repaint();
        parentPanel.revalidate();
        updateTableDisplay();
    }//GEN-LAST:event_manageUserButtonActionPerformed

    private void logoutBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBttnActionPerformed
        int ans = JOptionPane.showOptionDialog(this,"Do you want to logoff?", "Logout User", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[] {"Yes", "No"}, JOptionPane.YES_OPTION);
        if (ans == JOptionPane.YES_OPTION){
            login = new Login();
            login.setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_logoutBttnActionPerformed

    private void createTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTicketActionPerformed
        // TODO add your handling code here:
        parentPanel.removeAll();
        parentPanel.add(createTicketPanel);
        parentPanel.repaint();
        parentPanel.revalidate();
        String department = depComboBox3.getSelectedItem().toString();
        Data_Tickets emp = new Data_Tickets();
        String param = "SELECT DISTINCT CONCAT(firstname, ' ', lastname) AS combined FROM credentials WHERE department = '" + department + "'";
        Object[] emplist = emp.employeeList(param).toArray();
        assigneeComboBox1.setModel(new DefaultComboBoxModel(emplist));
        assigneeComboBox1.addItem("N/A");
    }//GEN-LAST:event_createTicketActionPerformed

    private void solvedTicketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solvedTicketsActionPerformed
        // TODO add your handling code here:
        parentPanel.removeAll();
        parentPanel.add(solvedTicketsPanel);
        parentPanel.repaint();
        parentPanel.revalidate();
        updateTableDisplay();

    }//GEN-LAST:event_solvedTicketsActionPerformed

    private void allTicketsBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allTicketsBttnActionPerformed
        // TODO add your handling code here:
        parentPanel.removeAll();
        parentPanel.add(allTicketsPanel);
        parentPanel.repaint();
        parentPanel.revalidate();
        updateTableDisplay();
    }//GEN-LAST:event_allTicketsBttnActionPerformed

    private void myTicketsBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myTicketsBttnActionPerformed
        // TODO add your handling code here:
        parentPanel.removeAll();
        parentPanel.add(myTicketsPanel);
        parentPanel.repaint();
        parentPanel.revalidate();
        updateTableDisplay();
    }//GEN-LAST:event_myTicketsBttnActionPerformed

    private void searchTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTableButtonActionPerformed
        // TODO add your handling code here:
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        alltickets = mySql.ShowRec("SELECT m1.* FROM masterrecord m1 LEFT JOIN masterrecord m2 ON (m1.TicketID = m2.TicketID and m1.RevisionCount < m2.RevisionCount) WHERE m2.RevisionCount IS NULL ORDER BY TicketID DESC");
        model = (DefaultTableModel) allTicketTable.getModel();
        model.setRowCount(0);
        for (Tickets t : alltickets) {
            Date dCreate;
            Date dUpdate;
            try {
                dCreate = sdf.parse(t.getDateCreated());
                dUpdate = sdf.parse(t.getDateUpdated());
                model.addRow(new Object[]{t.getId(), t.getType(), t.getPriority(), t.getDepartment(), dCreate, dUpdate, t.getPersonnel(), t.getStatus()});
            } catch (ParseException ex) {
                Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel>(model);
        String text = searchBox.getText();
        if (text.trim().length() == 0) {
            sorter.setRowFilter(null);
        } else {
            ticketType.setSelectedIndex(0);
            priority.setSelectedIndex(0);
            if(getAcctype().equals("Superadmin")){
            dept.setSelectedIndex(0);
            }
            status.setSelectedIndex(0);
            allTicketTable.setRowSorter(null);
            dateCreatedStart.setCalendar(null);
            dateCreatedEnd.setCalendar(null);
            dateUpdatedStart.setCalendar(null);
            dateUpdatedEnd.setCalendar(null);
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
        }
        allTicketTable.setRowSorter(sorter);
    }//GEN-LAST:event_searchTableButtonActionPerformed

    private void searchBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchBoxActionPerformed

    private void filterTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterTableButtonActionPerformed
        // TODO add your handling code here:
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        alltickets = mySql.ShowRec("SELECT m1.* FROM masterrecord m1 LEFT JOIN masterrecord m2 ON (m1.TicketID = m2.TicketID and m1.RevisionCount < m2.RevisionCount) WHERE m2.RevisionCount IS NULL ORDER BY TicketID DESC");
        model = (DefaultTableModel) allTicketTable.getModel();
        model.setRowCount(0);
        for (Tickets t : alltickets) {
            Date dCreate;
            Date dUpdate;
            try {
                dCreate = sdf.parse(t.getDateCreated());
                dUpdate = sdf.parse(t.getDateUpdated());
                model.addRow(new Object[]{t.getId(), t.getType(), t.getPriority(), t.getDepartment(), dCreate, dUpdate, t.getPersonnel(), t.getStatus()});
            } catch (ParseException ex) {
                Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        String type = ticketType.getSelectedItem().toString();
        String Priority = priority.getSelectedItem().toString();
        String department = dept.getSelectedItem().toString();
        String stats = status.getSelectedItem().toString();
        Date startDateCreated;
        Date endDateCreated;
        Date startDateUpdated;
        Date endDateUpdated;     

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel>(model);

        List<RowFilter<DefaultTableModel, Object>> filters = new ArrayList<>();
        if(type != "All")
        filters.add(RowFilter.regexFilter(type, 1));
        if(Priority != "All")
        filters.add(RowFilter.regexFilter(Priority, 2));
        if(department != "All")
        filters.add(RowFilter.regexFilter(department, 3));
        if(stats != "All")
        filters.add(RowFilter.regexFilter(stats, 7));
        try {
            startDateCreated = dateCreatedStart.getDate();
            filters.add(RowFilter.dateFilter(RowFilter.ComparisonType.AFTER, startDateCreated, 4)); 
        } catch (Exception ex) {
            System.out.println("Blank Date Created Start Date");
        }
        try {
            endDateCreated = dateCreatedEnd.getDate();
            filters.add(RowFilter.dateFilter(RowFilter.ComparisonType.BEFORE, endDateCreated, 4)); 
        } catch (Exception ex) {
            System.out.println("Blank Date Created End Date");
        }
        try {
            startDateUpdated = dateUpdatedStart.getDate();
            filters.add(RowFilter.dateFilter(RowFilter.ComparisonType.AFTER, startDateUpdated, 5)); 
        } catch (Exception ex) {
            System.out.println("Blank Date Updated Start Date");
        }
        try {
            endDateUpdated = dateUpdatedEnd.getDate();
            filters.add(RowFilter.dateFilter(RowFilter.ComparisonType.BEFORE, endDateUpdated, 5)); 
        } catch (Exception ex) {
            System.out.println("Blank Date Updated End Date");
        }        
        sorter.setRowFilter(RowFilter.andFilter(filters));
        allTicketTable.setRowSorter(sorter);
    }//GEN-LAST:event_filterTableButtonActionPerformed

    private void ticketTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ticketTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ticketTypeActionPerformed

    private void resetFieldsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetFieldsButtonActionPerformed
        // TODO add your handling code here:
        ticketType.setSelectedIndex(0);
        priority.setSelectedIndex(0);
        dept.setSelectedIndex(0);
        status.setSelectedIndex(0);
        searchBox.setText("");
        allTicketTable.setRowSorter(null);
        dateCreatedStart.setCalendar(null);
        dateCreatedEnd.setCalendar(null);
        dateUpdatedStart.setCalendar(null);
        dateUpdatedEnd.setCalendar(null);
        updateTableDisplay();
    }//GEN-LAST:event_resetFieldsButtonActionPerformed

    private void allTicketTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_allTicketTableMouseClicked
        // TODO add your handling code here:
        JPopupMenu userPop = new JPopupMenu("Additional Options");
        JMenuItem modifyTicket = new JMenuItem("Modify Ticket");
        JMenuItem showHistory = new JMenuItem("Ticket History");
        userPop.add(showHistory);
        modifyTicket.addActionListener(new ActionListener(){

            public void actionPerformed(ActionEvent e){
                int selectedRow =  allTicketTable.getSelectedRow();
                String dept = allTicketTable.getValueAt(selectedRow,3).toString();
                if((getDepartment().equals(dept) && getAcctype().equals("Administrator")) || getAcctype().equals("Superadmin")){
                    utilizeModifyTicket(allTicketTable, "All");
                }else{
                    JOptionPane.showMessageDialog(null, "Modifying Tickets of other Deparment is not allowed!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }

        });
        showHistory.addActionListener(new ActionListener(){

            public void actionPerformed(ActionEvent e){
                int selectedRow = allTicketTable.getSelectedRow();
                TicketHistory history = new TicketHistory(allTicketTable.getValueAt(selectedRow, 0).toString());
                history.show();
            }

        });
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3 && allTicketTable.getSelectedRow() != -1){
            if(getAcctype().equals("Administrator") || getAcctype().equals("Superadmin")){
                userPop.add(modifyTicket);
            }
            userPop.show(allTicketTable, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_allTicketTableMouseClicked
    
  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        try {
            UIManager.setLookAndFeel(new FlatIntelliJLaf());
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new MainMenu().setVisible(true);
                }
            });
        } catch (Exception ex) {
            System.err.println("Failed to initialize LaF");
        }
 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable allTicketTable;
    private javax.swing.JButton allTicketsBttn;
    private javax.swing.JPanel allTicketsPanel;
    private javax.swing.JTable assignedTicketTable;
    private javax.swing.JButton assignedTicketsBttn;
    private javax.swing.JPanel assignedTicketsPanel;
    private javax.swing.JComboBox<String> assigneeComboBox;
    private javax.swing.JComboBox<String> assigneeComboBox1;
    private javax.swing.JButton cancelModifyButton;
    private javax.swing.JButton cancelTicketBttn;
    private javax.swing.JButton closeTicketButton;
    private javax.swing.JButton cmd;
    private javax.swing.JButton createTicket;
    private javax.swing.JButton createTicketBttn;
    private javax.swing.JPanel createTicketPanel;
    private javax.swing.JTextArea createTicketTxtArea;
    private javax.swing.JButton createUserButton;
    private javax.swing.JLabel dateCreated;
    private com.toedter.calendar.JDateChooser dateCreatedEnd;
    private com.toedter.calendar.JDateChooser dateCreatedStart;
    private javax.swing.JLabel dateUpdated;
    private com.toedter.calendar.JDateChooser dateUpdatedEnd;
    private com.toedter.calendar.JDateChooser dateUpdatedStart;
    private javax.swing.JPanel defPanel;
    private javax.swing.JButton deleteUserButton;
    private javax.swing.JComboBox<String> depComboBox;
    private javax.swing.JComboBox<String> depComboBox3;
    private javax.swing.JComboBox<String> dept;
    private javax.swing.JLabel deptL;
    private javax.swing.JLabel filterBy;
    private javax.swing.JButton filterTableButton;
    private javax.swing.JButton homeBttn;
    private javax.swing.JPanel indivTicketPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JButton logoutBttn;
    private javax.swing.JButton manageUserButton;
    private javax.swing.JTable myTicketTable;
    private javax.swing.JButton myTicketsBttn;
    private javax.swing.JPanel myTicketsPanel;
    private javax.swing.JTextField newTicketName;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JPanel parentPanel;
    private javax.swing.JComboBox<String> priority;
    private javax.swing.JComboBox<String> priorityComboBox;
    private javax.swing.JComboBox<String> priorityComboBox1;
    private javax.swing.JLabel priorityL;
    private javax.swing.JButton refreshTableButton;
    private javax.swing.JButton refreshTableButton1;
    private javax.swing.JButton refreshTableButton4;
    private javax.swing.JButton refreshTableButton5;
    private javax.swing.JButton resetFieldsButton;
    private javax.swing.JButton resetTicketBttn1;
    private javax.swing.JLabel search;
    private javax.swing.JTextField searchBox;
    private javax.swing.JButton searchTableButton;
    private javax.swing.JButton solvedTickets;
    private javax.swing.JPanel solvedTicketsPanel;
    private javax.swing.JTable solvedTicketsTable;
    private javax.swing.JComboBox<String> status;
    private javax.swing.JTable ticketHistoryTable;
    private javax.swing.JTextField ticketNameTxtField;
    private javax.swing.JTextArea ticketNotesTextArea;
    private javax.swing.JLabel ticketNumberLbl1;
    private javax.swing.JLabel ticketNumberLbl4;
    private javax.swing.JTextArea ticketTxtArea;
    private javax.swing.JComboBox<String> ticketType;
    private javax.swing.JComboBox<String> ticketTypeComboBox;
    private javax.swing.JComboBox<String> ticketTypeComboBox1;
    private javax.swing.JLabel ticketTypeL;
    private javax.swing.JButton updateTicketButton;
    private javax.swing.JButton updateUserButton;
    private javax.swing.JPanel userManagementPanel;
    private javax.swing.JTable userManagerTable;
    // End of variables declaration//GEN-END:variables

    public void setAcctype(String acctype) {
        this.acctype = acctype;
    }

    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    public void setDepartment(String department) {
        this.department = department;
    }

    public String getAcctype() {
        return acctype;
    }

    public String getFirstname() {
        return firstname;
    }

    public String getLastname() {
        return lastname;
    }

    public String getDepartment() {
        return department;
    }

    public String getEmpid() {
        return empid;
    }

    public void setEmpid(String empid) {
        this.empid = empid;
    }
    
    protected void setInterface(String x) {
        System.out.println("User Type: " + getAcctype());
        System.out.println("First Name: " + getFirstname());
        System.out.println("Last Name: " + getLastname());
        System.out.println("Department: " + getDepartment());
        System.out.println("Employee ID: " + getEmpid());
        if (null != x) switch (x) {
         case "Employee":
             manageUserButton.setVisible(false);
             assigneeComboBox1.setVisible(false);
             assigneeComboBox.setEnabled(false);
             depComboBox.setEnabled(false);
             jLabel17.setVisible(false);
             dept.setEnabled(false);
             dept.setSelectedItem(getDepartment());
             solvedTicksParam = "SELECT m1.* FROM masterrecord m1 LEFT JOIN masterrecord m2 ON (m1.TicketID = m2.TicketID and m1.RevisionCount < m2.RevisionCount) WHERE m2.RevisionCount IS NULL HAVING Status = 'Closed' AND AssignedDepartment = '" + getDepartment() + "';";
             break;
         case "Administrator":
             manageUserButton.setVisible(true);
             depComboBox.setEnabled(false);
             credTableParam = "SELECT * FROM credentials WHERE department = '" + getDepartment() + "' AND acctype != 'Superadmin'";
             solvedTicksParam = "SELECT m1.* FROM masterrecord m1 LEFT JOIN masterrecord m2 ON (m1.TicketID = m2.TicketID and m1.RevisionCount < m2.RevisionCount) WHERE m2.RevisionCount IS NULL HAVING Status = 'Closed' AND AssignedDepartment = '" + getDepartment() + "';";
             dept.setEnabled(false);
             dept.setSelectedItem(getDepartment());
             break;
         case "Superadmin":
             solvedTicksParam = "SELECT m1.* FROM masterrecord m1 LEFT JOIN masterrecord m2 ON (m1.TicketID = m2.TicketID and m1.RevisionCount < m2.RevisionCount) WHERE m2.RevisionCount IS NULL HAVING Status = 'Closed';";
             manageUserButton.setVisible(true);
             credTableParam = "SELECT * FROM credentials";
             break;
         default:
             break;
     }
        jLabel3.setText("Are you ready to work on your tickets, " + getFirstname() + " " + getLastname() + "?");
        updateTableDisplay();
    }
    
    private void updateTableDisplay(){   
    user = creds.ShowRec(credTableParam);    
    model = (DefaultTableModel) userManagerTable.getModel();
    model.setRowCount(0);
    for(Credentials u: user) {    
    model.addRow(new Object[] {u.getEmpnum(),u.getF_name(),u.getM_name(),u.getL_name(),u.getPhonenum(),u.getEmail(),u.getBday(),u.getActType(),u.getDepartment(),u.getPosition(),u.getStartdate(),u.getGender()});
    }
    alltickets = mySql.ShowRec("SELECT m1.* FROM masterrecord m1 LEFT JOIN masterrecord m2 ON (m1.TicketID = m2.TicketID and m1.RevisionCount < m2.RevisionCount) WHERE m2.RevisionCount IS NULL ORDER BY TicketID DESC");
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    model = (DefaultTableModel) allTicketTable.getModel();
    model.setRowCount(0);
    for (Tickets t : alltickets) {
        Date dCreate;
        Date dUpdate;
        try {
            dCreate = sdf.parse(t.getDateCreated());
            dUpdate = sdf.parse(t.getDateUpdated());
            model.addRow(new Object[]{t.getId(), t.getType(), t.getPriority(), t.getDepartment(), dCreate, dUpdate, t.getPersonnel(), t.getStatus()});
        } catch (ParseException ex) {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    solvedtickets = mySql.ShowRec(solvedTicksParam);
    model = (DefaultTableModel) solvedTicketsTable.getModel();
    model.setRowCount(0);
    for (Tickets t : solvedtickets) {
    model.addRow(new Object[]{t.getId(), t.getTitle(), t.getType(), t.getPriority(), t.getDepartment(), t.getDateUpdated(), t.getPersonnel()});
    }
    assignedtickets= mySql.ShowRec("SELECT * FROM alltickets WHERE AssignedPersonnel = '" + getFirstname() + " " + getLastname() + "' AND Status = 'Open'");
    model = (DefaultTableModel) assignedTicketTable.getModel();
    model.setRowCount(0);
    for (Tickets t : assignedtickets) {
    model.addRow(new Object[]{t.getId(), t.getTitle(), t.getType(), t.getPriority(), t.getDepartment(), t.getDateCreated() ,t.getDateUpdated()});
    } 
    mytickets = mySql.ShowRec("SELECT m1.* FROM masterrecord m1 LEFT JOIN masterrecord m2 ON (m1.TicketID = m2.TicketID and m1.RevisionCount < m2.RevisionCount and m1.Creator = m2.Creator) WHERE m2.RevisionCount IS NULL HAVING m1.Creator = '" + getFirstname() + " " + getLastname() + "' ORDER BY TicketID ASC");
    model = (DefaultTableModel) myTicketTable.getModel();
    model.setRowCount(0);
    for (Tickets t : mytickets) {
    model.addRow(new Object[]{t.getId(), t.getTitle(), t.getType(), t.getPriority(), t.getDepartment(), t.getDateCreated() ,t.getDateUpdated(), t.getStatus()});
    }
    tickethistory = mySql.ShowRec("SELECT * FROM masterrecord WHERE TicketID = '" + ticketNumberLbl4.getText() + "' ORDER BY RevisionCount ASC");
    model = (DefaultTableModel) ticketHistoryTable.getModel();
    model.setRowCount(0);
    for (Tickets t : tickethistory) {
    model.addRow(new Object[]{t.getRevcount(), t.getDateUpdated(), t.getStatus(), t.getDepartment(), t.getPersonnel(), t.getPriority()});
    } 
    
    filterByDept();
    }
    
    private void filterByDept() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        alltickets = mySql.ShowRec("SELECT m1.* FROM masterrecord m1 LEFT JOIN masterrecord m2 ON (m1.TicketID = m2.TicketID and m1.RevisionCount < m2.RevisionCount) WHERE m2.RevisionCount IS NULL ORDER BY TicketID DESC");
        model = (DefaultTableModel) allTicketTable.getModel();
        model.setRowCount(0);
        for (Tickets t : alltickets) {
            Date dCreate;
            Date dUpdate;
            try {
                dCreate = sdf.parse(t.getDateCreated());
                dUpdate = sdf.parse(t.getDateUpdated());
                model.addRow(new Object[]{t.getId(), t.getType(), t.getPriority(), t.getDepartment(), dCreate, dUpdate, t.getPersonnel(), t.getStatus()});
            } catch (ParseException ex) {
                Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        String type = ticketType.getSelectedItem().toString();
        String Priority = priority.getSelectedItem().toString();
        String department = dept.getSelectedItem().toString();
        String stats = status.getSelectedItem().toString();
        Date startDateCreated;
        Date endDateCreated;
        Date startDateUpdated;
        Date endDateUpdated;     

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel>(model);

        List<RowFilter<DefaultTableModel, Object>> filters = new ArrayList<>();
        if(type != "All")
        filters.add(RowFilter.regexFilter(type, 1));
        if(Priority != "All")
        filters.add(RowFilter.regexFilter(Priority, 2));
        if(department != "All")
        filters.add(RowFilter.regexFilter(department, 3));
        if(stats != "All")
        filters.add(RowFilter.regexFilter(stats, 7));
        try {
            startDateCreated = dateCreatedStart.getDate();
            filters.add(RowFilter.dateFilter(RowFilter.ComparisonType.AFTER, startDateCreated, 4)); 
        } catch (Exception ex) {
            System.out.println("Blank Date Created Start Date");
        }
        try {
            endDateCreated = dateCreatedEnd.getDate();
            filters.add(RowFilter.dateFilter(RowFilter.ComparisonType.BEFORE, endDateCreated, 4)); 
        } catch (Exception ex) {
            System.out.println("Blank Date Created End Date");
        }
        try {
            startDateUpdated = dateUpdatedStart.getDate();
            filters.add(RowFilter.dateFilter(RowFilter.ComparisonType.AFTER, startDateUpdated, 5)); 
        } catch (Exception ex) {
            System.out.println("Blank Date Updated Start Date");
        }
        try {
            endDateUpdated = dateUpdatedEnd.getDate();
            filters.add(RowFilter.dateFilter(RowFilter.ComparisonType.BEFORE, endDateUpdated, 5)); 
        } catch (Exception ex) {
            System.out.println("Blank Date Updated End Date");
        }        
        sorter.setRowFilter(RowFilter.andFilter(filters));
        allTicketTable.setRowSorter(sorter);
    }
    
    private String checkFields(List<String> strings){
        for (String s : strings) {
        if (s == null || s.trim().isEmpty()) {
            System.out.println(s);
            return "not valid";
        }
    }
        return "valid";
    }
    
    private void manipulateTicket(ArrayList<String> stringParam, String option){
        Data_Tickets ticket = new Data_Tickets();
        Data_Notification notify = new Data_Notification();
        Tickets information = null;
        NotificationInfo notif = null;
        
        long now = System.currentTimeMillis();
        Timestamp tstamp = new Timestamp(now);
        
        String TicketID = stringParam.get(0),
        TicketName = stringParam.get(1),
        TicketDesc = stringParam.get(2),
        TicketType = stringParam.get(3),
        PriorityLevel = stringParam.get(4),
        AssignedDepartment = stringParam.get(5),
        DateCreated = stringParam.get(6),
        Creator = stringParam.get(7),
        Notes = stringParam.get(8),
        AssignedPersonnel = stringParam.get(9),
        DateUpdated = tstamp.toString(),
        Status = stringParam.get(12);
        int RevCount = Integer.parseInt(stringParam.get(10)),
        followup = Integer.parseInt(stringParam.get(11));
        
        List<String> array = Arrays.asList(TicketID, TicketName, TicketDesc, TicketType, PriorityLevel, AssignedDepartment, AssignedPersonnel, DateCreated, DateUpdated, Status, Creator);
        
        if (checkFields(array).equals("valid")){
        information = new Tickets(TicketID, RevCount, TicketName, TicketDesc, TicketType, PriorityLevel, AssignedDepartment, AssignedPersonnel, DateCreated, DateUpdated, Status, Creator, Notes, followup);
        
        
        switch(option){
            case "Create":
                ticket.addRow("alltickets", information);
                ticket.addRow("masterrecord", information);
                notif = new NotificationInfo(AssignedPersonnel, getFirstname() + " " + getLastname(), "assign", 0, DateUpdated, TicketID);
                notify.addRow("notification", notif);              
                JOptionPane.showMessageDialog(null, "Ticket has been created. Your ticket number is " + TicketID + ".","Ticket Created",JOptionPane.INFORMATION_MESSAGE);
                break;
            case "Update":
                ticket.deleteRow("alltickets", TicketID + " AND RevisionCount = '" + Integer.toString(RevCount-1)+ "'");
                ticket.addRow("alltickets", information);
                ticket.addRow("masterrecord", information);
                JOptionPane.showMessageDialog(null, "Ticket has been updated","Ticket Updated",JOptionPane.INFORMATION_MESSAGE);
                break;
            case "Close":
                ticket.deleteRow("alltickets", TicketID + " AND RevisionCount = '" + RevCount + "'");
                ticket.addRow("masterrecord", information);
                notif = new NotificationInfo(AssignedPersonnel, getFirstname() + " " + getLastname(), "close", 0, DateUpdated, TicketID);
                notify.addRow("notification", notif);  
                JOptionPane.showMessageDialog(null, "Ticket has been closed","Ticket Closed",JOptionPane.INFORMATION_MESSAGE);
                break;
            default:
                JOptionPane.showMessageDialog(null, "No method has been selected!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        }  
        
        else{
        JOptionPane.showMessageDialog(null, "All fields must not be blank!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        updateTableDisplay();                
    }
    
    private void utilizeModifyTicket(JTable table, String type){
            int selectedRow =  table.getSelectedRow();
            int tickettype = 0;
            int priority = 0;
            int dept = 0;
            
            if(type == "Assigned"){
            tickettype = 2;
            priority = 3;
            dept = 4;
            }
            else if(type == "All"){
            tickettype = 1;
            priority = 2;
            dept = 3;                
            }
            
            if(type != null){
            parentPanel.removeAll();
            parentPanel.add(indivTicketPanel);
            parentPanel.repaint();
            parentPanel.revalidate();

            String id = table.getValueAt(selectedRow,0).toString();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            ArrayList<Tickets> ticketinfo;
            Data_Tickets ticket = new Data_Tickets();
            String parameters = "SELECT m1.* FROM masterrecord m1 LEFT JOIN masterrecord m2 ON (m1.TicketID = m2.TicketID and m1.RevisionCount < m2.RevisionCount) WHERE m2.RevisionCount IS NULL HAVING TicketID = '" + id + "'";
            ticketinfo = ticket.ShowRec(parameters);

            ticketNumberLbl4.setText(id);
            ticketTypeComboBox.setSelectedItem(table.getValueAt(selectedRow,tickettype).toString());
            priorityComboBox.setSelectedItem(table.getValueAt(selectedRow,priority).toString());
            depComboBox.setSelectedItem(table.getValueAt(selectedRow,dept).toString());

            for(Tickets t: ticketinfo){
            ticketNameTxtField.setText(t.getTitle());
            ticketTxtArea.setText(t.getDesc());
            String department = depComboBox.getSelectedItem().toString();
            Data_Tickets emp = new Data_Tickets();
            String param = "SELECT DISTINCT CONCAT(firstname, ' ', lastname) AS combined FROM credentials WHERE department = '" + department + "'";
            Object[] emplist = emp.employeeList(param).toArray();
            assigneeComboBox.setModel(new DefaultComboBoxModel(emplist));
            if (t.getPersonnel().equals("N/A")){   
            assigneeComboBox.addItem("N/A");
            assigneeComboBox.setSelectedItem("N/A");
            }else{             
            assigneeComboBox.setSelectedItem(t.getPersonnel());
            }

            } 
            tickethistory = mySql.ShowRec("SELECT * FROM masterrecord WHERE TicketID = '" + id + "' ORDER BY RevisionCount ASC");
            model = (DefaultTableModel) ticketHistoryTable.getModel();
            model.setRowCount(0);
            for (Tickets t : tickethistory) {
            model.addRow(new Object[]{t.getRevcount(), t.getDateUpdated(), t.getStatus(), t.getDepartment(), t.getPersonnel(), t.getPriority()});
            }
            }else{
            JOptionPane.showMessageDialog(this, "Type is empty.");
            }
            updateTableDisplay();    
    }
    
    private void resetCreateFields(){
        newTicketName.setText("");
        createTicketTxtArea.setText("");
        ticketTypeComboBox1.setSelectedIndex(0);
        priorityComboBox1.setSelectedIndex(0);
        depComboBox3.setSelectedIndex(0);
        assigneeComboBox1.setSelectedIndex(0);
    }    
}